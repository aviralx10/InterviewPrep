//BRUTE FORCE - O(N) SOLUTION //BUILDING FROM START OF THE NUMBER TO END
class Solution {
public:
    int romanToInt(string s) {
        int x;
        int n=s.size();
        if(s[0]=='I'){x=1;}
        else if(s[0]=='V'){x=5;}
        else if(s[0]=='X'){x=10;}
        else if(s[0]=='L'){x=50;}
        else if(s[0]=='C'){x=100;}
        else if(s[0]=='D'){x=500;}
        else if(s[0]=='M'){x=1000;}
        for(int i=1;i<n;i++){
            if(s[i]=='I'){x+=1;continue;}
            else if(s[i]=='V'){
                x+=5;
                if (s[i-1]!='I'){continue;}
                else if (s[i-1]=='I'){x-=2;}
            }
            else if(s[i]=='X'){
                x+=10;
                if (s[i-1]!='I'){continue;}
                else if (s[i-1]=='I'){x-=2;}
            }
            else if(s[i]=='L'){
                x+=50;
                if (s[i-1]!='X'){continue;}
                else if (s[i-1]=='X'){x-=20;}
            }
            else if(s[i]=='C'){
                x+=100;
                if (s[i-1]!='X'){continue;}
                else if (s[i-1]=='X'){x-=20;}
            }
            else if(s[i]=='D'){
                x+=500;
                if (s[i-1]!='C'){continue;}
                else if (s[i-1]=='C'){x-=200;}
            }
            else if(s[i]=='M'){
                x+=1000;
                if (s[i-1]!='C'){continue;}
                else if (s[i-1]=='C'){x-=200;}
            }
        }
        return x;  
    }
};

//OPTIMISED SOLUTION USING MAPS

class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char,int> m;
        m['I']=1;
        m['V']=5;
        m['X']=10;
        m['L']=50;
        m['C']=100;
        m['D']=500;
        m['M']=1000;
        int sum=m[s.back()];
        for(int i=s.length()-2;i>=0;i--){
            if(m[s[i]]<m[s[i+1]]){
                sum-=m[s[i]];
            }else{
                sum+=m[s[i]];
            }
        }
        return sum;
    }
};

