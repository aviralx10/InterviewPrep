/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
ListNode* merge(ListNode* l1, ListNode* l2){                    //create a merge function
            ListNode* l3=new ListNode();
            ListNode* first=l1;ListNode* second=l2;ListNode* third=l3;
            while(first!=nullptr && second!=nullptr){
                if(first->val<=second->val){
                    third->next=first;
                    third=first;
                    first=first->next;
                    third->next=NULL;
                }
                else {
                    third->next=second;
                    third=second;
                    second=second->next;
                    third->next=NULL;
                }
            }
            if(first!=nullptr){
                third->next=first;        
            }else {
                third->next=second;
            }
            return l3->next;
        }
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0  || (lists.size()==1 && lists[0]==NULL)){
            return NULL;
        }
        else if(lists.size()==1 && lists[0]!=NULL){
            return lists[0];
        }
        else if(lists.size()==2){
            return merge(lists[0],lists[1]);
        }
        ListNode* r=merge(lists[0],lists[1]);
        for(int i=2;i<lists.size();i++){
            r=merge(r,lists[i]);
        }    
        return r;
        }
};
