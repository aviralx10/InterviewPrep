  //BRUTE FORCE SOLUTION IS TO TAKE ALL SUBSETS AND CHECK EACH SUBSET IF IT HAS EQUAL NUMBER OF 1 AND 0 {TC:O(N*2^N)}

//SOLUTION 1: OPTIMISED APPROACH IS TO LOOK at each index .. if A[i] is 0 make it as sum=-1 so as to make the total sum=0 if number of 1s and 0s are equal. 

int largestsubarray(vector<int> A){
int sum=0;
int max_size=-1;
  for(int i=0;i<n-1;i++){
    if(A[i]==0){sum=-1;}
    else sum=1;
    for(int j=i+1;j<n;j++){
      if(A[j]==0) {sum+=-1;}
      else sum+=1;
      if(sum==0 && max_size>j-i+1){                     //MAX_SIZE STORES THE LARGEST SUBARRAY WITH EQUAL NUMBER OF 0'S AND 1'S
        max_size=j-i+1;
        starting index=i;
      }
    }
  
  }
  return max_size;
}

//SOLUTION 2: USING HASH TABLES
int maxLen(int arr[], int N)
{
    int maxLen=-1;
    int sumleft[N];                                       //the idea is to store the sum of elements at every index and store in sumleft.
    if(arr[0]==1)sumleft[0]=1;
    else{sumleft[0]=-1;}
    for(int i=1;i<N;i++){
        if(arr[i]==1)sumleft[i]=sumleft[i-1]+1;             //if arr[i] is 1, add 1 to the sum else in the case of 0, add -1 to the sum.
        else{sumleft[i]=sumleft[i-1]-1;}
    }
    
    //we have 3 cases: CASE 1- the sumleft[i]=0, then the maxindex would simply be i+1;
                       CASE 2- sumleft[i]!=0 but we have not seen it before..therefore we store it in the map with its index.
                       CASE 3- sumleft[i]!=0 but we have seen it before..therefore we take the difference of i and (map[sumleft[i]]-which stores the 
                               index value when it was introduced in map) and compare with maxLen.
                               CASE 1 AND CASE 3 ACCOUNT FOR THE CASE THAT THERE AE EQUAL NUMBER OF 0 AND 1. 
    map<int,int> m;                                     
    for(int i=0;i<N;i++){                               
        if(sumleft[i]==0){
            maxLen=i+1;
        }
        if(m.find(sumleft[i])==m.end()){
            m[sumleft[i]]=i;
        }else{
            maxLen=max(maxLen,i-(m[sumleft[i]]));           //
        }
    }
    if(maxLen==-1)return 0;                                 //no subarray with equal number of 0 and 1 found. 
    return maxLen;
}


int countSubarrWithEqualZeroAndOne(int arr[], int n)
{
    // 'um' implemented as hash table to store
    // frequency of values obtained through
    // cumulative sum
    unordered_map<int, int> um;
    int curr_sum = 0;
  
    // Traverse original array and compute cumulative
    // sum and increase count by 1 for this sum
    // in 'um'. Adds '-1' when arr[i] == 0
    for (int i = 0; i < n; i++) {
        curr_sum += (arr[i] == 0) ? -1 : arr[i];
        um[curr_sum]++;
    }
  
    int count = 0;
    // traverse the hash table 'um'
    for (auto itr = um.begin(); itr != um.end(); itr++) {
  
        // If there are more than one prefix subarrays
        // with a particular sum
        if (itr->second > 1)
            count += ((itr->second * (itr->second - 1)) / 2);
    }
  
    // add the subarrays starting from 1st element and
    // have equal number of 1's and 0's
    if (um.find(0) != um.end())
        count += um[0];
  
    // required count of subarrays
    return count;
}
