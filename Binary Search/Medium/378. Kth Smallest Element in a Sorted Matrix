//BRUTE FORCE   //O(N2) 
//SIMPLY TRAVERSING THE MATRIX AND STORING THE ELEMENTS IN A 1D ARRAY AND SORTING THAT ARRAY AND FINDING THE ELEMENT AT THE KTH POSITION.
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int x=matrix.size();
        int y=matrix[0].size();
        vector<int> res;
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                res.push_back(matrix[i][j]);
            }
        }
        sort(res.begin(),res.end());
        return res[k-1];
    }
};

//BINARY SEARCH APPROACH                                               //TIME COMPLEXITY - O((M+N) LOG(M*N) )
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int m=matrix.size();                                            
        int n=matrix[0].size();
        int low=matrix[0][0];
        int high=matrix[m-1][n-1];
        while(low<high){
            int mid=low+(high-low)/2;                               //WE CALCULATE MID 
            int count=0;
            int j=n-1;                          
            for(int i=0;i<m;i++){                              //HERE WE CALCULATE THE TOTAL NUMBER OF ELEMENTS LESS THAN MID AND CALCULATE COUNT
                while(j>=0 && matrix[i][j]>mid)
                    j--;
                count+=j+1;
            }
            if(count<k){                                                        //IF COUNT<K, THEN LOW=MID+1;
                low=mid+1;
            }else{
                high=mid;                                                           //ELSE HIGH=MID;
            }
        }
        return low;
    }
};

this analogy can also be used to Find median in row wise sorted matrix..simply as the median is a point where n/2 elements are smaller than it in the array where
n is the size of the array. So as soon as we find n/2 elements less than the mid we return mid.
