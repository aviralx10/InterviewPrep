// TIME COMPLEXITY - O(LOGN)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0;
        int r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;                  //NUMS[0] IS THE PIVOT ELEMENT AROUND WHICH THE SORTED ARRAY IS TWISTED
            int comp=nums[mid];                                        
            if(((target>=nums[0]) && (nums[mid]>=nums[0])) || ((target<nums[0]) && (nums[mid]<nums[0]))){   //if both target and nums are on same side,proceed as usual
                comp=nums[mid];
            }else{
                if(target<nums[0]){comp=INT_MIN;}           //if they are on opposite side then, make the comp -INF OR +INF depending upon the target value
                else{comp=INT_MAX;}
            }
            if(target==comp){return mid;}         //BINARY SEARCH
            if(target>comp){l=mid+1;}
            else{r=mid-1;}
        }
        return -1;
    }
};
