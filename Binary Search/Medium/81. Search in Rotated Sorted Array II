// AVERAGE TIME COMPLEXITY IS O(LOGN) HOWEVER SKIPPING OF DUPLICATES MAY TAKE THE WORST TIME COMPLEXITY TO O(N)
// IF THE NUMS[MID] == NUMS[START] , WE DON'T KNOW WHERE TO GO .. EITHER TO THE LEFT OR TO THE RIGHT OF THE SUBARRAY
//FOR EX- [1,3,1,1,1] WHERE OUR FORMULA FROM SEARCH IN ROTATED SORTED ARRAY 1 TAKES US TO THE RIGHT OF MID BUT WE NEED TO GET TO THE LEFT
//HERE WE NEED TO SKIP THE DUPLICATE ELEMENTS IN ORDER TO HAVE US A NEAR DISTINCT ELEMENT ARRAY TO WHICH WE CAN APPLY OUR ROTATED SORTED ARRAY ANALOGY ON
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l=0;
        int r=nums.size()-1;
        while(l<=r){
            while (l < r && nums[l] == nums[l + 1]) l++; //skip duplicates from the left
            while (r > l && nums[r] == nums[r - 1]) r--;  //skip duplicates from the right
            int mid=l+(r-l)/2;
            int comp=nums[mid];
            if((nums[mid]>=nums[0] && target>=nums[0])||(nums[mid]<nums[0] && target<nums[0])){comp=nums[mid];}
            else{
                if(nums[0]>target){comp=INT_MIN;}
                else{comp=INT_MAX;}
            }
            if(target==comp){return true;}
            if(target>comp){l=mid+1;}
            else{r=mid-1;}
        }
        return false;
    }
};
