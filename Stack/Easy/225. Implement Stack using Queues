class MyStack {
public:
    /** Initialize your data structure here. */
    queue<int> q1;
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q1.push(x);                     done using 1 queue .. simple insertion O(1) time
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int z;                          //for deletion we need to bring the last element to the front
        int n=q1.size();                //so traverse size-1 times and push the front to the last
        for(int i=0;i<n-1;i++){         //after traversing,whichever element is in front is the element to be popped.
            int y=q1.front();           //O(n)
            q1.pop();
            q1.push(y);
        }
        z=q1.front();
        q1.pop();
        return z;
    }
    
    /** Get the top element. */
    int top() {
        int z;
        int n=q1.size();                        //same as popping but we do not delete the last element..we push it again
        for(int i=0;i<n-1;i++){                 //inside the queue
            int y=q1.front();
            q1.pop();
            q1.push(y);
        }
        z=q1.front();
        q1.pop();
        q1.push(z);
        return z; 
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q1.size()==0){return true;}
        return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
