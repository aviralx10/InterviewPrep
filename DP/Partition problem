//recursion
bool isSubsetSum(int arr[], int n, int sum)
{
    // Base Cases
    if (sum == 0)
        return true;
    if (n == 0 && sum != 0)
        return false;
 
    // If last element is greater than sum, then
    // ignore it
    if (arr[n - 1] > sum)
        return isSubsetSum(arr, n - 1, sum);
 
    /* else, check if sum can be obtained by any of
        the following
        (a) including the last element
        (b) excluding the last element
    */
    return isSubsetSum(arr, n - 1, sum)
           || isSubsetSum(arr, n - 1, sum - arr[n - 1]);
}
 
// Returns true if arr[] can be partitioned in two
// subsets of equal sum, otherwise false
bool findPartiion(int arr[], int n)
{
    // Calculate sum of the elements in array
    int sum = 0;
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    // If sum is odd, there cannot be two subsets
    // with equal sum
    if (sum % 2 != 0)
        return false;
 
    // Find if there is subset with sum equal to
    // half of total sum
    return isSubsetSum(arr, n, sum / 2);
}
//DP solution
int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2!=0){
            return 0;
        }
        bool dp[sum/2+1][N+1];
        for(int i=0;i<=N+1;i++){
            dp[0][i]=true;
        }
        for(int i=1;i<=sum/2;i++){
            dp[i][0]=false;
        }
        for(int i=1;i<=sum/2;i++){
            for(int j=1;j<=N;j++){
                dp[i][j]=dp[i][j-1];
                if(i>=arr[j-1]){
                    dp[i][j]=dp[i][j]||dp[i-arr[j-1]][j-1];           //option of selecting either arr[j-1] or not
                }
            }
        }
        return dp[sum/2][N];
        
    }
