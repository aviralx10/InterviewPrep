int knapSack(int W, int wt[], int val[], int n) 
{ 
   vector<vector<long long> > ways(n+1,vector<long long >(W+1));
        for(int i = 0; i <=n; i++) {             //if amount=0 then only 1 way to form it-> by not selecting it.
            ways[i][0]=0;
        }
        for(int j=1;j<=W;j++){
            ways[0][j]=0;
        }
       for(int i=1;i<=n;i++){               //main logic
            for(int j=1;j<=W;j++){
                  if(wt[i-1]<=j){                   
                     ways[i][j]=max(val[i-1]+ways[i-1][j-wt[i-1]],ways[i-1][j]);      //we have selected the ith item and weight is reduced by i, and we cannot select 
                  }                                                                   //that item again, so we select the optimum value corresponding to ways[i-1][j-wt[i-1]]
                  else {
                     
                     ways[i][j]=ways[i-1][j];             // not selecting the ith item
                  }
            }
       }
      return ways[n][W]; 
}
