//BFS O(n2)
struct cell { 
    int x, y; 
    int dis; 
    cell() {} 
    cell(int x, int y, int dis) 
        : x(x), y(y), dis(dis) 
    { 
    } 
}; 
  
// Utility method returns true if (x, y) lies 
// inside Board 
bool isInside(int x, int y, int N) 
{ 
    if (x >= 1 && x <= N && y >= 1 && y <= N) 
        return true; 
    return false; 
} 
  
// Method returns minimum step 
// to reach target position 
int minStepToReachTarget( 
    int knightPos[], int targetPos[], 
    int N) 
{ 
    // x and y direction, where a knight can move 
    int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 }; 
    int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 }; 
  
    // queue for storing states of knight in board 
    queue<cell> q; 
  
    // push starting position of knight with 0 distance 
    q.push(cell(knightPos[0], knightPos[1], 0)); 
  
    cell t; 
    int x, y; 
    bool visit[N + 1][N + 1]; 
  
    // make all cell unvisited 
    for (int i = 1; i <= N; i++) 
        for (int j = 1; j <= N; j++) 
            visit[i][j] = false; 
  
    // visit starting state 
    visit[knightPos[0]][knightPos[1]] = true; 
  
    // loop untill we have one element in queue 
    while (!q.empty()) { 
        t = q.front(); 
        q.pop(); 
  
        // if current cell is equal to target cell, 
        // return its distance 
        if (t.x == targetPos[0] && t.y == targetPos[1]) 
            return t.dis; 
  
        // loop for all reachable states 
        for (int i = 0; i < 8; i++) { 
            x = t.x + dx[i]; 
            y = t.y + dy[i]; 
  
            // If reachable state is not yet visited and 
            // inside board, push that state into queue 
            if (isInside(x, y, N) && !visit[x][y]) { 
                visit[x][y] = true; 
                q.push(cell(x, y, t.dis + 1)); 
            } 
        } 
    } 
} 


//DFS APPROACH- O(n2)

int isSafe(int i,int j,int N){
    if ((i>=0 && i<N) && (j>=0 && j<N)){return 1;}
    return 0;
}
int DFS(int x,int y,int N,int a,int b){
    int min_x=INT_MAX;
    if(x==a && y==b){
        return 0;
    }
    int row[8]={-2,-2,-1,-1,2,2,1,1};
    int col[8]={-1,1,-2,2,-1,1,-2,2};
    for(int i=0;i<8;i++){
        if(isSafe(x+row[i],y+col[i],N)==1){
            min_x=min(min_x,1+DFS(x+row[i],y+col[i],N,a,b));
        }
    }
    return min_x;
    
}
int minStepToReachTarget(int knightPos[], int targetPos[], int N) {
    int o_x=knightPos[0];
    int o_y=knightPos[1];
    int f_x=targetPos[0];
    int f_y=targetPos[1];
    if(o_x==f_x && o_y==f_y){
        return 0;
    }
    int min_x=DFS(o_x,o_y,N,f_x,f_y);
    return min_x;
    
}
