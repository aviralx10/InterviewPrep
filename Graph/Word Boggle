void DFS(vector<vector<char> >& board,vector<string>& dictionary,
                int i,int j,string &temp,vector<string> &res){
   if((i<0||i >= board.size())||(j<0||j>=board[i].size())|| board[i][j]=='#'){
       return;
   }
   temp+=board[i][j];
   for(int z=0;z<dictionary.size();z++){
       if(temp.compare(dictionary[z])==0){res.push_back(temp);}
   }
   char r=board[i][j];
   board[i][j]='#';
   int row[8]={-1, -1, -1, 0,0,  1,  1,  1};
   int col[8]={-1, 0, 1, -1, 1, -1, 0, 1};
   for(int x=0;x<8;x++){
       DFS(board,dictionary,i+row[x],j+col[x],temp,res);
   }
   temp.erase(temp.length()-1);                                 //most important line for backtracking
   board[i][j]=r;
}
vector<string> boggle(vector<vector<char> >& board,
                      vector<string>& dictionary) {
    vector<string> res;
    for(int i=0;i<board.size();i++){
        for(int j=0;j<board[i].size();j++){
            string temp="";
            DFS(board,dictionary,i,j,temp,res);
        }
    }
    return res;
}
