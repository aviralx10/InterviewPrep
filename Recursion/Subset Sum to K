//RECUSION
void subset(vector<int> &arr,vector<int> temp,vector<vector<int>> &res,int k,int idx){
    if(idx==arr.size()){
        if(k==0 && temp.size()!=0){
            res.push_back(temp);
        }
        return;
    }
    //do not include element
    subset(arr,temp,res,k,idx+1);
    temp.push_back(arr[idx]);
    subset(arr,temp,res,k-arr[idx],idx+1);
    temp.pop_back();
}
vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
{
    vector<vector<int>> res;
    vector<int> temp;
    int idx=0;
    subset(arr,temp,res,k,idx);
    return res;
}

//DP SOLUTION
bool isSubsetSum(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if
    // there is a subset of set[0..j-1] with sum
    // equal to i
    bool subset[n + 1][sum + 1];
 
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        subset[i][0] = true;
 
    // If sum is not 0 and set is empty,
    // then answer is false
    for (int i = 1; i <= sum; i++)
        subset[0][i] = false;
 
    // Fill the subset table in botton up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if (j < set[i - 1])
                subset[i][j] = subset[i - 1][j];
            if (j >= set[i - 1])
                subset[i][j] = subset[i - 1][j]
                               || subset[i - 1][j - set[i - 1]];
        }
    }
 
    /*   // uncomment this code to print table
     for (int i = 0; i <= n; i++)
     {
       for (int j = 0; j <= sum; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     }*/
 
    return subset[n][sum];
}
