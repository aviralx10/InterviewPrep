/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */DFS METHOD- RECURSIVE
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return isMirror(root,root);
    }
    bool isMirror(TreeNode* p,TreeNode* q){
        if(p==NULL && q==NULL){return true;}
        if ((p==NULL && q) || (q==NULL && p)){return false;}
        if(p->val!=q->val){return false;}
        return isMirror(p->left,q->right) && isMirror(p->right,q->left);
    }
    
};
//BFS METHOD- ITERATIVE
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL){return true;}
        queue <TreeNode* > t;
        if(!isMirror(root,root)){return false;}
        t.push(root);
        t.push(root);
        while(!t.empty()){
            TreeNode* p=t.front();
            t.pop();
            TreeNode* q=t.front();
            t.pop();
            if(p->left || q->right){
                if(!isMirror(p->left,q->right)){return false;}
                t.push(p->left);
                t.push(q->right);
            }
            if(p->right || q->left){
                 if(!isMirror(p->right,q->left)){return false;}
                t.push(p->right);
                t.push(q->left);
            }
        }
        return true;
        
    }
    bool isMirror(TreeNode* p,TreeNode* q){
        if(p==NULL && q==NULL){return true;}
        if ((p==NULL && q) || (q==NULL && p)){return false;}
        if(p->val!=q->val){return false;}
        return true;
    }
};
