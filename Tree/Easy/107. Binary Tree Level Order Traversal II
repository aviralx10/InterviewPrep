/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(root==NULL){return {};}
        queue<TreeNode*> q;
        stack<vector<int> > s;
        vector<int> temp;
        vector<vector<int> > res;           //same as binary level order travesal but use a stack to print the reverse elements.
        q.push(root);
        int count=1;
        while(!q.empty()){
            if(q.front()->left){q.push(q.front()->left);}
            if(q.front()->right){q.push(q.front()->right);}
            temp.push_back(q.front()->val);
            q.pop();
            if(--count==0){
                s.push(temp);
                temp.clear();
                count=q.size();
            }
        }
        while(!s.empty()){
            res.push_back(s.top());
            s.pop();
        }
        return res;
    }
};
