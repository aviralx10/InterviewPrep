/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//RECURSIVE IMPLEMENTATION -- DFS
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL){return true;}                //if both are NULL return true
        if((p==NULL && q!=NULL)||(p!=NULL && q==NULL)){return false;}      // if only one is NULL return true
        if(p->val!=q->val){return false;}           //if value is not same return false
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);    //check conditions for left child and right child
    }
};
//ITERATIVE IMPLEMENTATION---BFS
class Solution {
public:
    bool ischeck(TreeNode* p,TreeNode* q){
        if(p==NULL && q==NULL){return true;}
        if(p==NULL || q==NULL){return false;}
        if(p->val!=q->val){return false;}
        return true;
    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL){return true;}
        if(ischeck(p,q)==0){return false;}
        queue<TreeNode*> t;
        t.push(p);
        t.push(q);
        while(!empty(t)){
            TreeNode* p=t.front();
            t.pop();
            TreeNode* q=t.front();
            t.pop();
            if(p->left || q->left){
                if(!ischeck(p->left,q->left)){return false;}
                t.push(p->left);
                t.push(q->left);
            }
            if(p->right || q->right){
                if(!ischeck(p->right,q->right)){return false;}
                t.push(p->right);
                t.push(q->right);
            }
        }
        return true;
    }
};
