/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL){return 0;}
        int option1=maxDepth(root->left)+maxDepth(root->right); //general case
        int option2=diameterOfBinaryTree(root->left);  // if MAX diameter exists in the left half
        int option3=diameterOfBinaryTree(root->right);  //if MAX diameter exists in the right half
        return max(option1,max(option2,option3));   //return max diameter
    }
    int maxDepth(TreeNode* root){             //to calculate the height of the binary tree
        if(root==NULL){return 0;}
        return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};
