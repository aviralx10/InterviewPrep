string inorder(Node* node, unordered_map<string, int>& m) 
{ 
    if (!node) 
        return ""; 
  
    string str = "("; 
    str += inorder(node->left, m); 
    str += to_string(node->data); 
    str += inorder(node->right, m); 
    str += ")"; 
  
    // Subtree already present (Note that we use 
    // unordered_map instead of unordered_set 
    // because we want to print multiple duplicates 
    // only once, consider example of 4 in above 
    // subtree, it should be printed only once. 
    if (m[str] == 1) 
        cout << node->data << " "; 
  
    m[str]++; 
  
    return str; 
} 
void printAllDups(Node* root) 
{ 
    unordered_map<string, int> m; 
    inorder(root, m); 
} 
