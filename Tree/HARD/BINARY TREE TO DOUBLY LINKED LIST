void append(Node** head_ref, int new_data) 
{ 
    /* 1. allocate node */
    Node* new_node = new Node(); 
 
    Node* last = *head_ref; /* used in step 5*/
 
    /* 2. put in the data */
    new_node->data = new_data; 
 
    /* 3. This new node is going to be the last node, so 
        make next of it as NULL*/
    new_node->right = NULL; 
 
    /* 4. If the Linked List is empty, then make the new 
        node as head */
    if (*head_ref == NULL)
    { 
        new_node->left = NULL; 
        *head_ref = new_node; 
        return; 
    } 
 
    /* 5. Else traverse till the last node */
    while (last->right != NULL) 
        last = last->right; 
 
    /* 6. Change the next of last node */
    last->right = new_node; 
 
    /* 7. Make last node as previous of new node */
    new_node->left = last; 
 
    return; 
} 
void inorder(Node *root,vector<int> &res){
    if(root==NULL){return ;}
    inorder(root->left,res);
    res.push_back(root->data);
    inorder(root->right,res);
}

Node * bToDLL(Node *root)
{
    // your code here
    vector<int> res;
    inorder(root,res);
    Node *head=NULL;
    for(int i=0;i<res.size();i++){
        append(&head,res[i]);
    }
    return head;
}


//ALITER
void BinaryTree2DoubleLinkedList(node *root, node **head) 
{ 
    // Base case 
    if (root == NULL) return; 
  
    // Initialize previously visited node as NULL. This is 
    // static so that the same value is accessible in all recursive 
    // calls 
    static node* prev = NULL; 
  
    // Recursively convert left subtree 
    BinaryTree2DoubleLinkedList(root->left, head); 
  
    // Now convert this node 
    if (prev == NULL) 
        *head = root; 
    else
    { 
        root->left = prev; 
        prev->right = root; 
    } 
    prev = root; 
  
    // Finally convert right subtree 
    BinaryTree2DoubleLinkedList(root->right, head); 
} 

