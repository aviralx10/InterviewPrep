unordered_set<string> subtrees;
string dupSubUtil(Node *root) 
{ 
    string s = ""; 
 
    // If current node is NULL, return marker 
    if (root == NULL) 
        return s + "$"; 
 
    // If left subtree has a duplicate subtree. 
    string lStr = dupSubUtil(root->left); 
    if (lStr.compare(s) == 0) 
    return s; 
 
    // Do same for right subtree 
    string rStr = dupSubUtil(root->right); 
    if (rStr.compare(s) == 0) 
    return s; 
 
    // Serialize current subtree 
    s = s + root->data + lStr + rStr; 
 
    // If current subtree already exists in hash 
    // table. [Note that size of a serialized tree 
    // with single node is 3 as it has two marker 
    // nodes. 
    if (s.length() > 3 && 
        subtrees.find(s) != subtrees.end()) 
    return ""; 
 
    subtrees.insert(s); 
 
    return s; 
} 
bool dupSub(Node *root)
{
   
     string res=dupSubUtil(root);
     if(res.compare("")==0){
         return 1;
     }
     return 0;
     
}
