node* buildTree(char in[], char pre[], int inStrt, int inEnd)  
{  
    static int preIndex = 0;  
  
    if (inStrt > inEnd)  
        return NULL;  
  
    /* Pick current node from Preorder 
    traversal using preIndex  
    and increment preIndex */
    node* tNode = newNode(pre[preIndex++]);  
  
    /* If this node has no children then return */
    if (inStrt == inEnd)  
        return tNode;  
  
    /* Else find the index of this node in Inorder traversal */
    int inIndex = search(in, inStrt, inEnd, tNode->data);  
  
    /* Using index in Inorder traversal, construct left and  
    right subtress */
    tNode->left = buildTree(in, pre, inStrt, inIndex - 1);  
    tNode->right = buildTree(in, pre, inIndex + 1, inEnd);  
  
    return tNode;  
}  
  
/* UTILITY FUNCTIONS */
/* Function to find index of value in arr[start...end]  
The function assumes that value is present in in[] */
int search(char arr[], int strt, int end, char value)  
{  
    int i;  
    for (i = strt; i <= end; i++)  
    {  
        if (arr[i] == value)  
            return i;  
    }  
}  

//CASE OF POSTORDER AND INORDER
only do
index=n-1;
index--;  
tNode->right = buildTree(in, pre, inIndex + 1, inEnd);  
tNode->left = buildTree(in, pre, inStrt, inIndex - 1);
