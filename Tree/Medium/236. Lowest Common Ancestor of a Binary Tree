class Solution {
public:
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL){return NULL;}                
        if(root==p || root==q){return root;}        //return root if any of the p or q is root.
        TreeNode* left=lowestCommonAncestor(root->left, p, q);
        TreeNode* right=lowestCommonAncestor(root->right, p, q);
        if(left!=NULL && right!=NULL){return root;}   //IF BOTH ARE NOT NULL, AND RETURNING DIFFERENT VALUES, RETURN ROOT.
        if(left==NULL && right==NULL){return NULL;}     //if both NULL then return NULL
        return left!=NULL?left:right;       //if one of them is NULL , return the one which is not null
        
    }
};

//ALITER
bool find(Node* root,int n,vector<Node*> &x){
    if(root==NULL){
        return false;
    }
    x.push_back(root);
    if(root->data==n){
        return true;
    }
    
if((find(root->left,n,x))||find(root->right,n,x)){
        return true;
    }
    
    x.pop_back();
    return false;
}
Node* lca(Node* root ,int n1 ,int n2 )
{
   if(root==NULL){
       return NULL;
   }
   vector<Node*> x,y;
   if(!find(root,n1,x)|| !find(root,n2,y)){
       return NULL;
   }
   
   int i;
   for(i=0;i<x.size() && i<y.size();i++){
       if(x[i]->data!=y[i]->data){
           break;
       }
   }
   return x[i-1];
   
}
