#include <bits/stdc++.h>
using namespace std;
struct minHeap{
    char data;
    unsigned freq;
    minHeap *left,*right;
    minHeap(char data,unsigned freq){
        left=right=NULL;
        this->data=data;
        this->freq=freq;
    }
};
struct compare { 
    bool operator()(MinHeapNode* l, MinHeapNode* r) 
    { 
        return (l->freq > r->freq); 
    } 
};
void printNodes(struct MinHeapNode* root,string str){
    if(!root){
        return;
    }
    if(root->data!='$'){
        cout<<root->str<<" ";
    }
    printNodes(root->left,str+"0");
    printNodes(root->right,str+"1");
}
void huffman(vector<int> freq,vector<int> letter,int n){
    struct minHeapNode *left,*right,*top;
    priority_queue<minHeapNode*,vector<minHeapNode*>,compare> minHeap;
    for(int i=0;i<n;i++){
        minHeap.push(new minHeapNode(letter[i],freq[i]));
    }
    while(minHeap.size()!=1){
        left=minHeap.top();
        minHeap.pop();
        right=minHeap.top();
        minHeap.pop();
        top = new minHeapNode('$',left->freq+right->freq);
        minHeap.push(top);
    }
    printCodes(minHeap.top(),"");
    
    
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    string x;
	    cin>>x;
	    int n=len(x);
	    vector<int> freq(n);
	    for(int i=0;i<n;i++){
	        cin>>freq[i];
	    }
	    vector<char> letter(n);
	    for(int i=0;i<n;i++){
	        letter[i]=x[i];
	    }
	    huffman(freq,letter,n);
	}
}
