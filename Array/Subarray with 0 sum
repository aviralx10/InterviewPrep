//BRUTE FORCE: TC-> O(N2) , SC->O(1)
//iterating and considering all the subarrays
string iszero(int A[],int n){
	 for(int i=0;i<n;i++){
	    int sum=A[i];
	    if(sum==0){return "Yes";}
	    for(int j=i+1;j<n;j++){
	       sum+=A[j];
	       if(sum==0){
	            return "Yes";
	       }
	    }
	 }
	 return "No";
}



//OPTIMISED: TC-> O(N), SC-> O(N)
//while making a zero sum we have 2 possibilities->
//1. that the element A[i] is already 0
//2. that adding the element A[i] to sum makes it equal to an already earlier value of the sum which is stored in sum.
string iszero(int A[],int n){
    set<int>s;
    int sum=0;
	for(int i=0;i<n;i++){
	   sum+=A[i];
	   if(sum==0 || s.find(sum)!=s.end()){
	       return "Yes";
	   }
	   s.insert(sum);
	 }
	 return "No";
}
