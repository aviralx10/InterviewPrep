//solution
1) Create an empty Set in C++ STL (Note that a Set in C++ STL is 
   implemented using Self-Balancing Binary Search Tree). And insert
   first element of array into the set.

2) Initialize inversion count as 0.

3) Iterate from 1 to n-1 and do following for every element in arr[i]
     a) Insert arr[i] into the set.
     b) Find the first element greater than arr[i] in set
        using upper_bound() defined Set STL.
     c) Find distance of above found element from last element in set
        and add this distance to inversion count.

4) Return inversion count.
int getInvCount(int arr[],int n)
{
    // Create an empty set and insert first element in it
    multiset<int> set1;
    set1.insert(arr[0]);
  
    int invcount = 0; // Initialize result
  
    multiset<int>::iterator itset1; // Iterator for the set
  
    // Traverse all elements starting from second
    for (int i=1; i<n; i++)
    {
        // Insert arr[i] in set (Note that set maintains
        // sorted order)
        set1.insert(arr[i]);
  
        // Set the iterator to first greater element than arr[i]
        // in set (Note that set stores arr[0],.., arr[i-1]
        itset1 = set1.upper_bound(arr[i]);
  
        // Get distance of first greater element from end
        // and this distance is count of greater elements
        // on left side of arr[i]
        invcount += distance(itset1, set1.end());
    }
  
    return invcount;
}
//ALITER APPROACH
long long int mergeSort(long long arr[],long long temp[],long long l,long long r){
    long long count=0;        //for inversions
    if(l<r){
        long long mid=(r+l)/2;
        count+=mergeSort(arr,temp,l,mid);
        count+=mergeSort(arr,temp,mid+1,r);
        count+=merge(arr,temp,left,right,mid+1);
    }
    return count;
}
long long int merge(long long arr[],long long temp[],long long l,long long r,long long mid){
    long long count=0;
    long long i=l;
    long long j=mid;
    long long k=l;
    while((i<=mid-1)&&(j<=r)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }else{
            temp[k++]=arr[j++];
            count+=(mid-i);
        }
    }
    while(i<=mid-1){
        temp[k++]=arr[i++];
    }
    while(j<=r){
        temp[k++]=arr[j++];
    }
    for (i = l; i <= r; i++){arr[i] = temp[i];}
    return count;
}
long long inversionCount(long long arr[], long long N)
{
    long long temp[N];
    return mergeSort(arr,temp,0,N-1);
}
