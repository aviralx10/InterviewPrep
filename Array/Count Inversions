long long int mergeSort(long long arr[],long long temp[],long long l,long long r){
    long long count=0;        //for inversions
    if(l<r){
        long long mid=(r+l)/2;
        count+=mergeSort(arr,temp,l,mid);
        count+=mergeSort(arr,temp,mid+1,r);
        count+=merge(arr,temp,left,right,mid+1);
    }
    return count;
}
long long int merge(long long arr[],long long temp[],long long l,long long r,long long mid){
    long long count=0;
    long long i=l;
    long long j=mid;
    long long k=l;
    while((i<=mid-1)&&(j<=r)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }else{
            temp[k++]=arr[j++];
            count+=(mid-i);
        }
    }
    while(i<=mid-1){
        temp[k++]=arr[i++];
    }
    while(j<=r){
        temp[k++]=arr[j++];
    }
    for (i = l; i <= r; i++){arr[i] = temp[i];}
    return count;
}
long long inversionCount(long long arr[], long long N)
{
    long long temp[N];
    return mergeSort(arr,temp,0,N-1);
}
